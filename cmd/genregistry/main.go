package main

import (
	"bytes"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"text/template"
	"time"

	"go/ast"
	"go/parser"
	"go/token"
)

const (
	registryImport       = "github.com/mrsaints/go-struct-registry/registry"
	registryCodeTemplate = `// Code generated by genregistry. DO NOT EDIT.
// {{ .Timestamp }}
package {{ .PackageName }}

import (
    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)

func init() {
    {{- range $name, $type := .Structs }}
    registry.RegisterStruct("{{ $name }}", (*{{ $type }})(nil))
    {{- end }}
}
`
)

func main() {
	dir := flag.String("dir", ".", "generate registry code for this go package path")
	flag.Parse()

	fp, err := filepath.Abs(*dir)
	if err != nil {
		log.Fatalln("failed to parse path:", err)
	}

	set := token.NewFileSet()
	packs, err := parser.ParseDir(set, fp, nil, 0)
	if err != nil {
		log.Fatalln("failed to parse package:", err)
	}

	structs := make(map[string]string)

	for _, pack := range packs {
		for _, f := range pack.Files {
			for _, d := range f.Decls {

				v, isGenDecl := d.(*ast.GenDecl)
				if !isGenDecl {
					continue
				}

				if v.Tok != token.TYPE {
					continue
				}

				for _, spec := range v.Specs {
					s, isTypeSpec := spec.(*ast.TypeSpec)
					if !isTypeSpec {
						continue
					}

					_, isStruct := s.Type.(*ast.StructType)
					if !isStruct {
						continue
					}

					structs[fmt.Sprintf("%s.%s", f.Name.String(), s.Name.String())] = s.Name.String()
				}
			}
		}
	}

	t := template.Must(template.New("base").Parse(registryCodeTemplate))

	var b bytes.Buffer
	vars := struct {
		Timestamp   time.Time
		PackageName string
		Imports     []string
		Structs     map[string]string
	}{
		time.Now(),
		filepath.Base(fp),
		[]string{
			registryImport,
		},
		structs,
	}
	if err := t.Execute(&b, vars); err != nil {
		log.Fatalln("failed to generate registry code:", err)
	}

	f, err := os.Create(filepath.Join(fp, "registry.generated.go"))
	if err != nil {
		log.Fatalln("failed to create file for generated registry code:", err)
	}
	defer f.Close()

	if _, err := fmt.Fprint(f, b.String()); err != nil {
		log.Fatalln("failed to write generated registry code to file:", err)
	}
}
